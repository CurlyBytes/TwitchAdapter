@using NegativeEddy.Bots.Twitch.SampleBot.Commands
<div class="commandeditor">
    <div>
        @foreach (var decorator in decorators)
        {
            <div>
                @switch (decorator)
                {
                    case CoolDownDecorator d:
                        <CooldownDecoratorEditor Decorator="@d" />
                        break;
                    case BeforeAndAfterCommandDecorator d:
                        <NoConfigCommandDecoratorEdit Decorator="@d" />
                        break;
                    default:
                        <UnknownCommandDecoratorEdit Decorator="@decorator" />
                        break;
                }
                <button @onclick="async e => await OnDelete(decorator)">Delete @decorator.DecoratorName</button>
            </div>
        }
    </div>
    <div>
        <GenericCommandEditor Command="@command" />
    </div>
</div>


@code {

    [Parameter]
    public BotCommandDecorator Decorator { get; set; }

    [Parameter]
    public EventCallback<BotCommandReplacedEventArgs> CommandReplaced { get; set; }

    List<BotCommandDecorator> decorators = new List<BotCommandDecorator>();
    IBotCommand command;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IBotCommand tmp = Decorator;
        while (tmp is BotCommandDecorator bcd)
        {
            decorators.Add(bcd);
            tmp = bcd.Command;
        }
        command = tmp;
    }

    protected async Task OnDelete(BotCommandDecorator toRemove)
    {
        if (Decorator == toRemove)
        {
            // need to remove the outer decorator, but this is referenced outside the control. Notify the host
            // that they need to replace it with this new command
            await CommandReplaced.InvokeAsync(new BotCommandReplacedEventArgs { oldCmd = Decorator, newCmd = Decorator.Command });
            StateHasChanged();
        }
        else
        {
            Decorator.Remove(toRemove);
            StateHasChanged();
        }
    }
}
