@page "/commands"
@using NegativeEddy.Bots.Twitch.SampleBot.Commands
@using NegativeEddy.Bots.Twitch.BlazorHost.Model
@inject BotCommandManager commands
@inject CommandTypeManager commandTypes
@inject IJSRuntime JsRuntime

<h1>Current Bot Commands</h1>

<div style="display:table">
    @foreach (var cmdInfo in commands.Commands)
    {
        <div style="display:table-row; padding:15px">
            <div><span style="font-weight:bolder; font-size:larger">!@cmdInfo.Key</span> (@cmdInfo.Value.Name)</div>
            <div><button @onclick="async e => await OnDelete(cmdInfo.Key)">Delete command</button><button>Add Option</button></div>

            <div style="margin-bottom:20px;">
                <GenericCommandEditor Command="@cmdInfo.Value" />
            </div>
        </div>
    }
</div>
<button @onclick="Save">Save</button>
<hr />
<div>
    <h1>Add New Command</h1>
    <label for="NewCommandText">!Command</label>
    <input id="NewCommandText" @bind="NewCommandText" />
    <label for="newCommandType">Command Type</label>
    <select id="newCommandType" @bind="NewCommandType">
        @foreach (var cmdType in commandTypes.DefaultCommands)
        {
            <option>@cmdType.Key</option>
        }
    </select>
    <button @onclick="AddNewCommand">Add</button>
</div>
<hr />

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        NewCommandType = commandTypes.DefaultCommands.First().Key;
    }

    protected void Save()
    {

    }

    private string NewCommandType { get; set; }
    private string NewCommandText { get; set; }

    protected void AddNewCommand()
    {
        var newCmd = commandTypes.Create(NewCommandType);

        commands.Add(NewCommandText, newCmd);
    }

    protected async Task OnDelete(string commandId)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            commands.Remove(commandId);
        }
    }
}
